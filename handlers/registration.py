import asyncio
import re
from aiogram import F
from aiogram import Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, CallbackQuery, Message
from handlers.menu import build_menu_text
from database.db import save_user_to_db, delete_user_from_db, get_user_data, on_startup, on_shutdown
from keyboards.allergy_keyboards import allergy_inline_keyboard, ALLERGENS
from handlers.ai import get_ai_response

router = Router()

class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_gender = State()
    waiting_for_weight = State()
    waiting_for_height = State()
    waiting_for_allergy_confirmation = State()
    waiting_for_allergies = State()
    waiting_for_allergies_manual = State()
    waiting_for_goal = State()
    waiting_for_timeframe = State()
    waiting_for_confirmation = State()
    waiting_for_delete_confirmation = State()
    waiting_ai_question = State()

def gender_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ú"), KeyboardButton(text="–ñ")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def allergy_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–î–∞")], [KeyboardButton(text="–ù–µ—Ç")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def goal_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ—Ö—É–¥–µ–Ω–∏–µ")],
            [KeyboardButton(text="–ù–∞–±–æ—Ä –º–∞—Å—Å—ã")],
            [KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def timeframe_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="3 –º–µ—Å—è—Ü–∞")],
            [KeyboardButton(text="–ü–æ–ª–≥–æ–¥–∞")],
            [KeyboardButton(text="–ì–æ–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def final_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–í–ø–µ—Ä—ë–¥ –∫ —Ü–µ–ª–∏")],
            [KeyboardButton(text="–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"), KeyboardButton(text="–ù–æ–≤—ã–π –ø–ª–∞–Ω")],
            [KeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")]  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        ],
        resize_keyboard=True
    )

def delete_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å")],
            [KeyboardButton(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

async def bot_startup():
    on_startup()

async def bot_shutdown():
    on_shutdown()

@router.message(Command("start"))
async def start_handler(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    await state.update_data(user_id=user_id)
    await msg.answer(f"–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.\n–¢–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {user_id}\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(RegistrationStates.waiting_for_name)

@router.message(Command("mydata"))
async def mydata_handler(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    loop = asyncio.get_running_loop()
    user_data = await loop.run_in_executor(None, get_user_data, user_id)
    if user_data:
        summary = (f"üìã <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</b>:\n\n"
                   f"üÜî ID: {user_data['user_id']}\n"
                   f"üë§ –ò–º—è: {user_data['name']}\n"
                   f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
                   f"‚öß –ü–æ–ª: {user_data['gender']}\n"
                   f"‚öñ –í–µ—Å: {user_data['weight']} –∫–≥\n"
                   f"üìè –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
                   f"üåø –ê–ª–ª–µ—Ä–≥–∏–∏: {user_data['allergies']}\n"
                   f"üéØ –¶–µ–ª—å: {user_data['goal']}\n"
                   f"‚è≥ –°—Ä–æ–∫: {user_data['timeframe']}")
        await msg.answer(summary)
    else:
        await msg.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@router.message(Command("regenerate"))
async def regenerate_handler(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    loop = asyncio.get_running_loop()
    user_data = await loop.run_in_executor(None, get_user_data, user_id)

    if not user_data:
        await msg.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    processing_msg = await msg.reply("‚è≥ –°–æ—Å—Ç–∞–≤–ª—è—é –Ω–æ–≤—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...")
    menu_text = await build_menu_text(user_data)
    await processing_msg.delete()
    await msg.reply(menu_text)

@router.message(Command("delete"))
async def delete_handler(msg: types.Message, state: FSMContext):
    await msg.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.", reply_markup=delete_keyboard())
    await state.set_state(RegistrationStates.waiting_for_delete_confirmation)

@router.message(StateFilter(RegistrationStates.waiting_for_delete_confirmation))
async def process_delete_confirmation(message: types.Message, state: FSMContext):
    if message.text == "–î–∞, —É–¥–∞–ª–∏—Ç—å":
        user_id = message.from_user.id
        loop = asyncio.get_running_loop()
        await loop.run_in_executor(None, delete_user_from_db, user_id)
        await message.reply("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n"
                            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
    elif message.text == "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å":
        await message.reply(
            "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=final_menu_keyboard())
        await state.set_state(RegistrationStates.waiting_for_confirmation)
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞, —É–¥–∞–ª–∏—Ç—å' –∏–ª–∏ '–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å'.", reply_markup=delete_keyboard())

@router.message(StateFilter(RegistrationStates.waiting_for_name))
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not re.match(r'^[–ê-–Ø–∞-—è–Å—ë\s]+', name):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã).")
        return
    await state.update_data(name=name)
    await message.reply("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(RegistrationStates.waiting_for_age)

@router.message(StateFilter(RegistrationStates.waiting_for_age))
async def process_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) < 10 or int(message.text) > 100:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 100 –ª–µ—Ç).")
        return
    await state.update_data(age=int(message.text))
    await message.reply("–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª?", reply_markup=gender_keyboard())
    await state.set_state(RegistrationStates.waiting_for_gender)

@router.message(StateFilter(RegistrationStates.waiting_for_gender))
async def process_gender(message: types.Message, state: FSMContext):
    gender = message.text.strip().lower()
    if gender not in ["–º", "–∂"]:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=gender_keyboard())
        return
    await state.update_data(gender="–ú—É–∂—Å–∫–æ–π" if gender == "–º" else "–ñ–µ–Ω—Å–∫–∏–π")
    await message.reply("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥)?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegistrationStates.waiting_for_weight)

@router.message(StateFilter(RegistrationStates.waiting_for_weight))
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text.replace(',', '.'))
        if weight <= 25 or weight>300:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å.")
            return
        await state.update_data(weight=weight)
        await message.reply("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?")
        await state.set_state(RegistrationStates.waiting_for_height)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5).")

@router.message(StateFilter(RegistrationStates.waiting_for_height))
async def process_height(message: types.Message, state: FSMContext):
    try:
        height = int(message.text)
        if height <= 120 or height>240:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç.")
            return
        await state.update_data(height=height)
        await message.reply("–£ —Ç–µ–±—è –µ—Å—Ç—å –∞–ª–ª–µ—Ä–≥–∏–∏?", reply_markup=allergy_keyboard())
        await state.set_state(RegistrationStates.waiting_for_allergy_confirmation)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(StateFilter(RegistrationStates.waiting_for_allergy_confirmation))
async def process_allergy_confirmation(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        await state.update_data(selected_allergies=set())
        await message.reply(
            "–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–≤–æ–∏ –∞–ª–ª–µ—Ä–≥–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ï—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç ‚Äî –Ω–∞–∂–º–∏ ¬´–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é¬ª.",
            reply_markup=allergy_inline_keyboard()
        )
        await state.set_state(RegistrationStates.waiting_for_allergies)
    elif message.text.lower() == "–Ω–µ—Ç":
        await state.update_data(allergies="–ù–µ—Ç")
        await message.reply("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", reply_markup=goal_keyboard())
        await state.set_state(RegistrationStates.waiting_for_goal)
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=allergy_keyboard())

@router.callback_query(lambda c: c.data.startswith("allergy_"), StateFilter(RegistrationStates.waiting_for_allergies))
async def process_allergy_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = set(data.get("selected_allergies", set()))
    cb_data = callback.data

    if cb_data == "allergy_manual":
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–∏ –∞–ª–ª–µ—Ä–≥–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–ª–æ–∫–æ, –æ—Ä–µ—Ö–∏):")
        await state.set_state(RegistrationStates.waiting_for_allergies_manual)
        await callback.answer()
        return

    if cb_data == "allergy_done":
        allergies_str = ", ".join(selected) if selected else "–ù–µ—Ç"
        await state.update_data(allergies=allergies_str)
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer(f"–ê–ª–ª–µ—Ä–≥–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {allergies_str}")
        await callback.message.answer("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", reply_markup=goal_keyboard())
        await state.set_state(RegistrationStates.waiting_for_goal)
        await callback.answer()
        return

    allergen = cb_data.replace("allergy_", "")
    if allergen in selected:
        selected.remove(allergen)
    else:
        selected.add(allergen)
    await state.update_data(selected_allergies=selected)
    await callback.message.edit_reply_markup(reply_markup=allergy_inline_keyboard(selected))
    await callback.answer()

@router.message(StateFilter(RegistrationStates.waiting_for_allergies_manual))
async def process_manual_allergies(message: types.Message, state: FSMContext):
    entered = [a.strip().lower() for a in message.text.split(",")]
    invalid = [a for a in entered if a not in ALLERGENS]
    if invalid:
        await message.reply(
            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {', '.join(invalid)}.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞: {', '.join(ALLERGENS)}"
        )
        return
    allergies_str = ", ".join(entered)
    await state.update_data(allergies=allergies_str)
    await message.reply(f"–ê–ª–ª–µ—Ä–≥–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {allergies_str}")
    await message.answer("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", reply_markup=goal_keyboard())
    await state.set_state(RegistrationStates.waiting_for_goal)

@router.message(StateFilter(RegistrationStates.waiting_for_goal))
async def process_goal(message: types.Message, state: FSMContext):
    if message.text not in ["–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"]:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=goal_keyboard())
        return
    await state.update_data(goal=message.text.strip())
    await message.reply("–ó–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç—ã —Ö–æ—á–µ—à—å –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏?", reply_markup=timeframe_keyboard())
    await state.set_state(RegistrationStates.waiting_for_timeframe)


@router.message(Command("ask"))
async def handle_ai_question(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    loop = asyncio.get_running_loop()
    user_data = await loop.run_in_executor(None, get_user_data, user_id)

    await msg.reply("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏–ª–∏ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏:")
    await state.set_state("waiting_ai_question")
    await state.update_data(user_context=user_data)

@router.message(F.text, StateFilter("waiting_ai_question"))
async def process_ai_question(msg: Message, state: FSMContext):
    data = await state.get_data()
    processing_msg = await msg.reply("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å...")

    try:
        response = await get_ai_response(
            user_message=msg.text,
            user_context=data.get("user_context")
        )
        await msg.reply(response)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.set_state(RegistrationStates.waiting_for_confirmation)

    except Exception as e:
        await msg.reply(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await processing_msg.delete()


@router.message(StateFilter(RegistrationStates.waiting_for_timeframe))
async def process_timeframe(message: types.Message, state: FSMContext):
    if message.text not in ["3 –º–µ—Å—è—Ü–∞", "–ü–æ–ª–≥–æ–¥–∞", "–ì–æ–¥"]:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ä–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=timeframe_keyboard())
        return
    await state.update_data(timeframe=message.text.strip())
    user_data = await state.get_data()

    summary = (f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
               f"üÜî ID: {user_data['user_id']}\n"
               f"üë§ –ò–º—è: {user_data['name']}\n"
               f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
               f"‚öß –ü–æ–ª: {user_data['gender']}\n"
               f"‚öñ –í–µ—Å: {user_data['weight']} –∫–≥\n"
               f"üìè –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
               f"üåø –ê–ª–ª–µ—Ä–≥–∏–∏: {user_data['allergies']}\n"
               f"üéØ –¶–µ–ª—å: {user_data['goal']}\n"
               f"‚è≥ –°—Ä–æ–∫: {user_data['timeframe']}")

    loop = asyncio.get_running_loop()
    await loop.run_in_executor(None, save_user_to_db, user_data)

    await message.reply(summary)
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=final_menu_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_confirmation)

@router.message(StateFilter(RegistrationStates.waiting_for_confirmation))
async def send_menu(message: types.Message, state: FSMContext):
    text = message.text.lower().replace("—ë", "–µ").strip()
    if text == "–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        await message.reply(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=final_menu_keyboard()
        )
        await state.set_state(RegistrationStates.waiting_for_confirmation)

    elif text == "–≤–ø–µ—Ä–µ–¥ –∫ —Ü–µ–ª–∏":
        user_id = message.from_user.id
        loop = asyncio.get_running_loop()
        user_data = await loop.run_in_executor(None, get_user_data, user_id)

        if not user_data:
            await message.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=ReplyKeyboardRemove())
            return

        processing_msg = await message.reply("‚è≥ –°–æ—Å—Ç–∞–≤–ª—è—é –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...")
        menu_text = await build_menu_text(user_data)
        await processing_msg.delete()
        await message.reply(menu_text, reply_markup=final_menu_keyboard())
    elif text == "–º–æ–∏ –¥–∞–Ω–Ω—ã–µ":
        await mydata_handler(message, state)
    elif text == "–Ω–æ–≤—ã–π –ø–ª–∞–Ω":
        await regenerate_handler(message, state)
    elif text == "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await handle_ai_question(message, state)
    elif text == "—É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç":
        await delete_handler(message, state)
    elif text == "/mydata":
        await mydata_handler(message, state)
    elif text == "/regenerate":
        await regenerate_handler(message, state)
    elif text == "/delete":
        await delete_handler(message, state)
    else:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
            reply_markup=final_menu_keyboard()
        )
