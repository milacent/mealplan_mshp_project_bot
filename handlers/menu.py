import aiohttp
from config import SPOONACULAR_API_KEY


def calculate_target_calories(weight, height, age, gender, goal, timeframe, activity_level=1.55):
    if gender == "–º—É–∂—Å–∫–æ–π":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161

    maintenance_calories = bmr * activity_level

    if goal == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ":
        if "3 –º–µ—Å—è—Ü–∞" in timeframe:
            target = maintenance_calories * 0.8
        elif "–ø–æ–ª–≥–æ–¥–∞" in timeframe:
            target = maintenance_calories * 0.85
        elif "–≥–æ–¥" in timeframe:
            target = maintenance_calories * 0.9
        else:
            target = maintenance_calories * 0.85
    elif goal == "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã":
        if "3 –º–µ—Å—è—Ü–∞" in timeframe:
            target = maintenance_calories + 350
        elif "–ø–æ–ª–≥–æ–¥–∞" in timeframe:
            target = maintenance_calories + 300
        elif "–≥–æ–¥" in timeframe:
            target = maintenance_calories + 250
        else:
            target = maintenance_calories + 300
    else:
        target = maintenance_calories

    return int(target)

async def get_meal_nutrition(meal_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –ö–ë–ñ–£ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª—é–¥–∞ –ø–æ –µ–≥–æ ID."""
    url = f"https://api.spoonacular.com/recipes/{meal_id}/information"
    params = {
        "apiKey": SPOONACULAR_API_KEY,
        "includeNutrition": "true"
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                nutrition = data.get("nutrition", {}).get("nutrients", [])
                result = {
                    "calories": 0,
                    "protein": 0,
                    "fat": 0,
                    "carbohydrates": 0
                }
                for nutrient in nutrition:
                    name = nutrient["name"].lower()
                    amount = nutrient["amount"]
                    if name == "calories":
                        result["calories"] = round(amount)
                    elif name == "protein":
                        result["protein"] = round(amount, 1)
                    elif name == "fat":
                        result["fat"] = round(amount, 1)
                    elif name == "carbohydrates":
                        result["carbohydrates"] = round(amount, 1)
                return result
            else:
                return {"calories": 0, "protein": 0, "fat": 0, "carbohydrates": 0}


async def build_menu_text(user_data: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å —Å –ö–ë–ñ–£ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏.

    Args:
        user_data (dict): –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (goal, weight, height, age, gender, allergies, timeframe)

    Returns:
        str: –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
    """
    goal = user_data["goal"].lower()
    timeframe = user_data["timeframe"].lower()
    weight = user_data["weight"]
    height = user_data["height"]
    age = user_data["age"]
    gender = user_data["gender"].lower()
    allergies = user_data["allergies"] if user_data["allergies"] != "–ù–µ—Ç" else ""

    target_calories = calculate_target_calories(weight, height, age, gender, goal, timeframe)

    url = "https://api.spoonacular.com/mealplanner/generate"
    params = {
        "apiKey": SPOONACULAR_API_KEY,
        "timeFrame": "day",
        "targetCalories": target_calories,
    }
    if allergies:
        params["excludeIngredients"] = allergies

    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                meals = data.get("meals", [])

                menu = f"üçΩ <b>–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å –¥–ª—è {goal} (~{target_calories} –∫–∫–∞–ª)</b>\n"
                menu += f"–ü–µ—Ä–∏–æ–¥: {timeframe}\n\n"

                total_calories = 0
                total_protein = 0
                total_fat = 0
                total_carbs = 0

                for i, meal in enumerate(meals, 1):
                    nutrition = await get_meal_nutrition(meal["id"])
                    total_calories += nutrition["calories"]
                    total_protein += nutrition["protein"]
                    total_fat += nutrition["fat"]
                    total_carbs += nutrition["carbohydrates"]

                    menu += f"  <b>–ü—Ä–∏–µ–º {i}: {meal['title']}</b>\n"
                    menu += f"  –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {meal['readyInMinutes']} –º–∏–Ω\n"
                    menu += f"  –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç: {meal['sourceUrl']}\n"
                    menu += f"  –ö–ë–ñ–£: {nutrition['calories']} –∫–∫–∞–ª, "
                    menu += f"–ë: {nutrition['protein']} –≥, –ñ: {nutrition['fat']} –≥, –£: {nutrition['carbohydrates']} –≥\n\n"

                menu += f"<b>–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å</b>:\n"
                menu += f"–ö–∞–ª–æ—Ä–∏–∏: {round(total_calories, 2)} –∫–∫–∞–ª\n"
                menu += f"–ë–µ–ª–∫–∏: {round(total_protein, 2)} –≥\n"
                menu += f"–ñ–∏—Ä—ã: {round(total_fat, 2)} –≥\n"
                menu += f"–£–≥–ª–µ–≤–æ–¥—ã: {round(total_carbs, 2)} –≥"

                return menu
            else:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {response.status}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
